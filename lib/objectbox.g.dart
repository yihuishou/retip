// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/domain/entities/test_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5716923334634761228),
      name: 'AlbumObx',
      lastPropertyId: const obx_int.IdUid(3, 8639627069916983316),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6327200893514069627),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2921938410389913177),
            name: 'artistEntityId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 1818297239359372319),
            relationTarget: 'ArtistObx'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8639627069916983316),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'trackEntities',
            srcEntity: 'TrackObx',
            srcField: 'albumEntity')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 535634345238822436),
      name: 'ArtistObx',
      lastPropertyId: const obx_int.IdUid(2, 6538087194810949687),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1471426565762413946),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6538087194810949687),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'albumEntities',
            srcEntity: 'AlbumObx',
            srcField: 'artistEntity')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7055328011938006224),
      name: 'TrackObx',
      lastPropertyId: const obx_int.IdUid(6, 4357948986580657340),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 100550647013771877),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1336494232968751082),
            name: 'albumEntityId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7084691771257139820),
            relationTarget: 'AlbumObx'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5662548288418708502),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3913938039513043551),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7236308088942257394),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4357948986580657340),
            name: 'size',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 7055328011938006224),
      lastIndexId: const obx_int.IdUid(2, 7084691771257139820),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AlbumObx: obx_int.EntityDefinition<AlbumObx>(
        model: _entities[0],
        toOneRelations: (AlbumObx object) => [object.artistEntity],
        toManyRelations: (AlbumObx object) => {
              obx_int.RelInfo<TrackObx>.toOneBacklink(2, object.id,
                      (TrackObx srcObject) => srcObject.albumEntity):
                  object.trackEntities
            },
        getId: (AlbumObx object) => object.id,
        setId: (AlbumObx object, int id) {
          object.id = id;
        },
        objectToFB: (AlbumObx object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.artistEntity.targetId);
          fbb.addOffset(2, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = AlbumObx(id: idParam, title: titleParam);
          object.artistEntity.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.artistEntity.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<AlbumObx>(
              object.trackEntities,
              store,
              obx_int.RelInfo<TrackObx>.toOneBacklink(
                  2, object.id, (TrackObx srcObject) => srcObject.albumEntity));
          return object;
        }),
    ArtistObx: obx_int.EntityDefinition<ArtistObx>(
        model: _entities[1],
        toOneRelations: (ArtistObx object) => [],
        toManyRelations: (ArtistObx object) => {
              obx_int.RelInfo<AlbumObx>.toOneBacklink(2, object.id,
                      (AlbumObx srcObject) => srcObject.artistEntity):
                  object.albumEntities
            },
        getId: (ArtistObx object) => object.id,
        setId: (ArtistObx object, int id) {
          object.id = id;
        },
        objectToFB: (ArtistObx object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = ArtistObx(id: idParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<ArtistObx>(
              object.albumEntities,
              store,
              obx_int.RelInfo<AlbumObx>.toOneBacklink(2, object.id,
                  (AlbumObx srcObject) => srcObject.artistEntity));
          return object;
        }),
    TrackObx: obx_int.EntityDefinition<TrackObx>(
        model: _entities[2],
        toOneRelations: (TrackObx object) => [object.albumEntity],
        toManyRelations: (TrackObx object) => {},
        getId: (TrackObx object) => object.id,
        setId: (TrackObx object, int id) {
          object.id = id;
        },
        objectToFB: (TrackObx object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final locationOffset = fbb.writeString(object.location);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.albumEntity.targetId);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, locationOffset);
          fbb.addInt64(4, object.duration);
          fbb.addInt64(5, object.size);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final durationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final sizeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = TrackObx(
              id: idParam,
              title: titleParam,
              location: locationParam,
              duration: durationParam,
              size: sizeParam);
          object.albumEntity.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.albumEntity.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AlbumObx] entity fields to define ObjectBox queries.
class AlbumObx_ {
  /// See [AlbumObx.id].
  static final id =
      obx.QueryIntegerProperty<AlbumObx>(_entities[0].properties[0]);

  /// See [AlbumObx.artistEntity].
  static final artistEntity =
      obx.QueryRelationToOne<AlbumObx, ArtistObx>(_entities[0].properties[1]);

  /// See [AlbumObx.title].
  static final title =
      obx.QueryStringProperty<AlbumObx>(_entities[0].properties[2]);

  /// see [AlbumObx.trackEntities]
  static final trackEntities =
      obx.QueryBacklinkToMany<TrackObx, AlbumObx>(TrackObx_.albumEntity);
}

/// [ArtistObx] entity fields to define ObjectBox queries.
class ArtistObx_ {
  /// See [ArtistObx.id].
  static final id =
      obx.QueryIntegerProperty<ArtistObx>(_entities[1].properties[0]);

  /// See [ArtistObx.name].
  static final name =
      obx.QueryStringProperty<ArtistObx>(_entities[1].properties[1]);

  /// see [ArtistObx.albumEntities]
  static final albumEntities =
      obx.QueryBacklinkToMany<AlbumObx, ArtistObx>(AlbumObx_.artistEntity);
}

/// [TrackObx] entity fields to define ObjectBox queries.
class TrackObx_ {
  /// See [TrackObx.id].
  static final id =
      obx.QueryIntegerProperty<TrackObx>(_entities[2].properties[0]);

  /// See [TrackObx.albumEntity].
  static final albumEntity =
      obx.QueryRelationToOne<TrackObx, AlbumObx>(_entities[2].properties[1]);

  /// See [TrackObx.title].
  static final title =
      obx.QueryStringProperty<TrackObx>(_entities[2].properties[2]);

  /// See [TrackObx.location].
  static final location =
      obx.QueryStringProperty<TrackObx>(_entities[2].properties[3]);

  /// See [TrackObx.duration].
  static final duration =
      obx.QueryIntegerProperty<TrackObx>(_entities[2].properties[4]);

  /// See [TrackObx.size].
  static final size =
      obx.QueryIntegerProperty<TrackObx>(_entities[2].properties[5]);
}
